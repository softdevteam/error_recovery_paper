\documentclass[acmsmall,small,screen]{acmart}\settopmatter{printfolios=true,printccs=false,printacmref=false}
%\documentclass[acmsmall,review,anonymous]{acmart}\settopmatter{printfolios=true,printccs=false,printacmref=false}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}

\usepackage{adjustbox}
\usepackage{booktabs}
\usepackage{listings}
\usepackage{multicol}
\usepackage{proof}
\usepackage{softdev}
\usepackage{subcaption}
\usepackage{wrapfig}
\usepackage{xspace}

\usepackage[ruled]{algorithm2e} % For algorithms
\renewcommand{\algorithmcfname}{ALGORITHM}
\SetAlFnt{\small}
\SetAlCapFnt{\small}
\SetAlCapNameFnt{\small}
\SetAlCapHSkip{0pt}
\IncMargin{-\parindent}

\acmJournal{PACMPL}
\acmVolume{1}
\acmNumber{CONF} % CONF = POPL or ICFP or OOPSLA
\acmArticle{1}
\acmYear{2018}
\acmMonth{1}
\acmDOI{} % \acmDOI{10.1145/nnnnnnn.nnnnnnn}
\startPage{1}

\lstset{
    basicstyle=\tt\scriptsize,
    xleftmargin=0pt,
    numbersep=.8em,
    numberstyle=\scriptsize\tt\color{gray},
    captionpos=b,
    escapeinside={{<!}{!>}},
}

\setcopyright{none}

\bibliographystyle{ACM-Reference-Format}
\citestyle{acmauthoryear}

% DOI
%\acmDOI{0000001.0000001}

% Paper history
%\received{February 2007}

\newcommand{\corchueloplus}{\textit{CPCT}$^+$\xspace}
\newcommand{\crarrow}{\rightarrow_{\textrm{\tiny CR}}}
\newcommand{\crarrowstar}{\rightarrow_{\textrm{\tiny CR}}^*}
\newcommand{\kyarrow}{\rightarrow_{\textrm{\tiny KY}}}
\newcommand{\lrarrowstar}{\rightarrow_{\textrm{\tiny LR}}^*}
\newcommand{\lrarrow}{\rightarrow_{\textrm{\tiny LR}}}
\newcommand{\mf}{\textit{MF}\xspace}
\newcommand{\mfarrow}{\rightarrow_{\textrm{\tiny MF}}}
\newcommand{\mfarrowstar}{\rightarrow_{\textrm{\tiny MF}}^*}

\include{experimentstats}

% Document starts
\begin{document}
% Title portion. Note the short title for running heads
\title[Fast Multiple Repair Error Recovery]{Fast Multiple Repair Error Recovery}

\author{Lukas Diekmann}
\affiliation{%
  \department{Software Development Team}
  \institution{King's College London}
  \country{United Kingdom}}
\author{Laurence Tratt}
\orcid{0000-0002-5258-3805}
\affiliation{%
  \department{Software Development Team}
  \institution{King's College London}
  \country{United Kingdom}
}
\thanks{Authors' URLs: %
    L.~Diekmann~\url{http://diekmann.co.uk/},
    L.~Tratt~\url{http://tratt.net/laurie/}.
}


\begin{abstract}
Syntax errors are generally easy to fix for humans, but not for parsers: the
latter often fail to find an effective recovery, leading to a cascading chain of
errors that drown out the original. More advanced recovery techniques
suffer much less from this problem but have seen little practical use because
their typical performance was seen as poor and their worse case unbounded.
In this paper we show that not only can an advanced approach run in acceptable time
-- which we define as spending a maximum of 0.5s in error recovery per file -- but
that we can increase the complexity of the problem to finding \emph{all} minimum
cost recovery options, and still do so within acceptable time. We first extend
Corchuelo et al.'s algorithm, before introducing a new, faster, alternative \mf. We
validate our algorithms with a corpus of \corpussize real-world
syntactically invalid Java programs: \mf is able to find recovery options for
\mfsuccessrate of these in acceptable time.
\end{abstract}

\keywords{Parsing, error recovery, programming languages}

\maketitle

\section{Introduction}

Programming is a humbling job, which requires acknowledging that we will make
untold errors in our quest to perfect a program. Most troubling are semantic
errors, where we intended the program to do one thing, but it does another. Less
troubling, but often no less irritating, are syntax errors, which are
(generally minor) deviances from the exacting syntax required by a compiler.
So common are syntax errors that the parsers in modern compilers expect us to make several
in a single input. Rather than stop on the first syntax error encountered, they attempt
to \emph{recover} from it. This allows them to report, and us to fix, all our
syntax errors in one go.

When error recovery works well, it is a useful productivity gain. Unfortunately,
widely used approaches are ad-hoc and simplistic, with
two weaknesses limiting their usefulness: only limited consideration is
given to the context of the error; and the only recoveries attempted are the
skipping of input until a pre-determined synchronisation
token is reached~\cite[p.~3]{degano95comparison} or the insertion of a
single synchronisation token. Inappropriate recoveries cause a
cascade of spurious syntax errors (see
Figure~\ref{fig:javaerror} for an example): programmers quickly learn that
only the position of the first error -- not the reported repair, nor the position of
subsequent errors -- can be relied upon to be accurate.

\begin{figure}[t]
\begin{minipage}{0.48\textwidth}
\begin{tabular}{p{0.02\textwidth}p{0.45\textwidth}}
\begin{subfigure}{0.02\textwidth}
\caption{}
\label{lst:javaerror:input}
\end{subfigure}
&
\begin{minipage}[t]{0.45\textwidth}
\vspace{-7pt}
\begin{lstlisting}
class C {
  int x y;
}
\end{lstlisting}
\end{minipage}
\\
\begin{subfigure}{0.02\textwidth}
\addtocounter{subfigure}{1}
\caption{}
\label{lst:javaerror:mf}
\end{subfigure}
&
\begin{minipage}[t]{0.45\textwidth}
\vspace{-7pt}
\begin{lstlisting}
Error at line 2 col 9. Repairs found:
  Delete "y"
  Insert "COMMA"
  Insert "EQ"
\end{lstlisting}
\end{minipage}
\end{tabular}
\end{minipage}
%
\begin{minipage}{0.48\textwidth}
\vspace{-20.5pt}
\begin{tabular}{p{0.02\textwidth}p{0.45\textwidth}}
\begin{subfigure}{0.02\textwidth}
\addtocounter{subfigure}{-2}
\caption{}
\label{lst:javaerror:javac}
\end{subfigure}
&
\begin{minipage}[t]{0.45\textwidth}
\vspace{-7pt}
\begin{lstlisting}
C.java:2: error: ';' expected
  int x y;
       ^
C.java:2: error: <identifier> expected
  int x y;
         ^
\end{lstlisting}
\end{minipage}
\end{tabular}
\end{minipage}
%&
%\begin{minipage}[t]{0.47\textwidth}
%\vspace{-17pt}
\vspace{-10pt}
\caption{An example of a simple, common Java syntax error
(\subref{lst:javaerror:input}) and the problems traditional error recovery has in
dealing with it. \texttt{javac} (\subref{lst:javaerror:javac}) spots the error
when it encounters `\texttt{y}'. Its error recovery heuristic then
repairs the input by inserting a semicolon before `\texttt{y}' (i.e.~making
the input equivalent to `\texttt{int x; y;}'). This immediately leads to a spurious second parse error,
since `\texttt{y}' on its own is not a valid statement. The two new error
recovery algorithms (\corchueloplus and \mf) we introduce in this paper both
produce the output shown in (\subref{lst:javaerror:mf}): after spotting an error
when parsing encounters `\texttt{y}', they then use the Java grammar to find the
complete set of minimum cost repair sequences (unlike previous approaches which
non-determinstically find one minimum cost repair sequence). In this case three
repair sequences are reported to the user: one can delete `\texttt{y}'
entirely (`\texttt{int x;}'), or insert a comma
(`\texttt{int x, y;}'), or insert an equals sign (\texttt{`int x = y;'}).}
\label{fig:javaerror}
%\end{minipage}
%\end{tabular}
\end{figure}

Most of us are so used to this state of affairs that
we assume it to be inevitable. However, there are more advanced algorithms which,
as well as being able to deal with any LR grammar, take into account the full context of the error, and have
several ways of recovering from errors. Probably the earliest such algorithm
is \citet{aho72minimum}, which, upon encountering an error, creates on-the-fly an
alternative (possibly ambiguous) grammar which allows the parser to recover.
The implementation complexity of this algorithm, and the challenge of explaining
to users what has been done, probably explain why it has fallen out of
favour in programming language circles. A simpler family of algorithms, which
trace their roots to \citet{fischer79locally}, instead try to find a single minimum cost
\emph{repair sequence} of token insertions and deletions which allow the parser to
recover. Algorithms in this family are good at recovering from errors and are
easily adapted to give human-friendly feedback. However, they
have seen little practical use because their typical
performance was seen as poor and their worse case unbounded \cite[p.~14]{mckenzie95error}.

In this paper we first test the following hypothesis:

\begin{description}
  \item[H1] Error recovery algorithms from the \citet{fischer79locally} family
    can repair nearly all errors in acceptable time.
\end{description}

We (somewhat arbitrarily) define `acceptable time' as 0.5s for error recovery
per file (i.e.~all errors in a file must be
recovered from within 0.5s) since we think that even the most demanding user
will tolerate such a delay. We
strongly validate this hypothesis \laurie{quantify}. To a
reasonable extent our access to faster hardware made it more likely that we
can validate this hypothesis than past researchers. However, while existing
algorithms in the \citet{fischer79locally} family can find at most a single
minimum cost repair sequence, we also test a second, stronger, hypothesis:

\begin{description}
  \item[H2] The complete set of minimum cost repair sequences can nearly
    always be found in acceptable time.
\end{description}

We also strongly validate this hypothesis \laurie{quantify}. In other words, we are able to tackle a
harder version of the problem than any previous algorithm, and still do so in
acceptable time. This leads to higher quality, and more programmer
friendly, error messages (see Figure~\ref{fig:javaerror} for an example).
Once we have one or more repair sequences, we then have to choose one
to repair the input, and allow parsing to continue as normal. Rather
than pick an arbitrary candidate, we rank repair sequences by how
far they allow parsing to continue successfully, and choose from the
subset that gets furthest. We thus test a third hypothesis:

\begin{description}
  \item[H3] Choosing a minimum cost repair sequence $s$ which allows local
parsing to continue further than a different minimum cost repair sequence $s'$
reduces the cascading error problem.
\end{description}

\laurie{i know this makes some difference, but don't know yet to what extent it
makes a difference}

We first use one of the more recent algorithms in this family -- that of
\citet{corchuelo02repairing} -- as a base, correcting and substantially extending it
to form a new algorithm \corchueloplus (Section~\ref{corchueloplus}). We
then show that an even newer algorithm which promises better performance -- that
of \citet{kimyi10astar} -- has problems which cause it to miss many
minimum cost repair sequences (Section~\ref{kimyi}). However, we are able to use
it as partial inspiration for an entirely new error recovery algorithm \mf
(Section~\ref{mf}), which is approximately \mfratioovercorchuelo faster than
\corchueloplus. We aim for both algorithms to be as simple as possible, so that
they are realistic targets for tool builders: \corchueloplus is somewhat
simpler than \mf, though the latter is still less than 1,000 lines of Rust code.

We then validate \corchueloplus and \mf on a corpus of \corpussize real,
syntactically incorrect, Java programs (Section~\ref{experiment}) -- approximately
15x bigger than the biggest previous experiment \cite[p.~84]{cerecke03phd}. Within the
time budget of 0.5s: \corchueloplus is able to find repairs for \corchuelosuccessrate
of files within this time, with a mean recovery time of \corchuelomeantime; and
\mf is able to find repairs for \mfsuccessrate of files within this time, with
a mean recovery time of \mfmeantime. We believe that this shows that such
approaches are ready for wider usage, either on their own, or as part of a multi-phase
recovery system such as \citet{deJonge12natural}.


\section{Background}

% Stategraph for the grammar:
% 0:  [^ -> . Expr, {'$'}]
%     'INT' -> 4
%     '(' -> 1
%     Factor -> 3
%     Term -> 2
%     Expr -> 5
% 1:  [Factor -> '(' . Expr ')', {')', '*', '+', '$'}]
%     Term -> 2
%     Expr -> 6
%     '(' -> 1
%     Factor -> 3
%     'INT' -> 4
% 2:  [Expr -> Term . '+' Expr, {')', '$'}]
%     [Expr -> Term ., {')', '$'}]
%     '+' -> 7
% 3:  [Term -> Factor ., {')', '+', '$'}]
%     [Term -> Factor . '*' Term, {')', '+', '$'}]
%     '*' -> 8
% 4:  [Factor -> 'INT' ., {')', '*', '+', '$'}]
% 5:  [^ -> Expr ., {'$'}]
% 6:  [Factor -> '(' Expr . ')', {')', '*', '+', '$'}]
%     ')' -> 9
% 7:  [Expr -> Term '+' . Expr, {')', '$'}]
%     Factor -> 3
%     Term -> 2
%     'INT' -> 4
%     Expr -> 10
%     '(' -> 1
% 8:  [Term -> Factor '*' . Term, {')', '+', '$'}]
%     'INT' -> 4
%     Term -> 11
%     Factor -> 3
%     '(' -> 1
% 9:  [Factor -> '(' Expr ')' ., {')', '*', '+', '$'}]
% 10: [Expr -> Term '+' Expr ., {')', '$'}]
% 11: [Term -> Factor '*' Term ., {')', '+', '$'}]

\begin{figure}[t]
\begin{lstlisting}
%start Expr
%%
Expr: Term "+" Expr
    | Term ;

Term: Factor "*" Term
    | Factor ;

Factor: "(" Expr ")"
      | "INT" ;
\end{lstlisting}
\vspace{-10pt}
\caption{An example grammar, its corresponding stategraph, and statetable.
  Each item within a state $[N \colon \alpha \bullet \beta]$ references one
  of the rule $N$'s productions; $\alpha$ and $\beta$ each
represent zero or more symbols; with the \emph{dot} ($\bullet$) representing
  how much of the production must have been matched ($\alpha$) if parsing has
  reached that state, and how much remains ($\beta$).
  \laurie{the stategraph and statetable are (obviously) missing}}
\label{fig:stategraphtable}
\label{fig:exprgrammar}
\end{figure}

We assume a high-level understanding of the mechanics of parsing in this paper,
but in this section we provide a handful of definitions, and a brief refresher
of relevant low-level details, needed to understand the rest of this paper.
Although the parsing tool we created for this paper is written in Rust, we
appreciate that this is still an unfamiliar language to most readers: code examples
are therefore given in Python which, we hope, is familiar to most.

Although there are many flavours of parsing, the \citet{fischer79locally} family
of algorithms, including those presented in this paper, are based on LR
parsing~\cite{knuth65lllr}. As well as describing the largest practical set
of unambiguous grammars, LR parsing remains one of the most widely used parsing
approaches due to the ubiquity of Yacc~\cite{johnson75yacc} and its
descendants (which include the Rust parsing tool we created for this paper).
We use Yacc syntax throughout this paper so that
examples can easily be tested in Yacc-compatible parsing tools.

Yacc-like tools take in a Context-Free Grammar (CFG) and produce a parser from
it. The CFG has one or more \emph{rules}; each rule has a name and one or more
\emph{productions} (often called `alternatives'); each production contains one
or more \emph{symbols}; and a symbol is either a \emph{terminal} (i.e.~a token
type such as \texttt{INT}) or a \emph{nonterminal} (i.e.~a reference to another rule in
the grammar). One rule is designated the \emph{start rule}. The resulting parser
takes as input a stream of tokens, each of which has a \emph{type}
(e.g.~\texttt{INT}) and a \emph{value} (e.g.~\texttt{123}).\footnote{In practise, the
system we outline requires a \emph{lexer} which splits string inputs up into
tokens. In the interests of brevity, we assume the existence of a tool such as
Lex which performs this task.} Strictly speaking, parsing is the act of
determining whether a stream of tokens is correct with respect to the underlying
grammar. Since this is rarely useful on its own, Yacc-like tools allow grammars
to specify `semantic actions' which are executed when a production in the grammar is
successfully matched. In this paper, we assume that the semantic actions build
a \emph{parse tree}, ordering the tokens into a tree of nonterminals (nodes
which can have children) and terminals (nodes which cannot have children)
relative to the underlying grammar.

The beauty of LR parsing stems from the way a parser is constructed. The CFG is
first transformed into a \emph{stategraph}, which is a statemachine
where each node contains one or more \emph{items} (describing the valid
parse states at that point) and edges are labelled with terminals or
nonterminals. Since even on a modern machine, a canonical
(i.e.~unmerged) LR stategraph for a real-world grammar takes several seconds to
build, and a surprising amount of memory to store, we use the state merging
algorithm of \citet{pager77practical} to merge together compatible states. The
effect of this is significant, reducing the Java grammar we use later from
\laurie{8000ish} to \laurie{900ish} states. The stategraph is then transformed into a
\emph{statetable} with one row per state. Each row has a possibly empty \emph{action} (shift, reduce,
or accept) for each terminal and a possibly empty \emph{goto state} for each
nonterminal. Figure~\ref{fig:stategraphtable} shows an example grammar, its
stategraph, and statetable.

The statetable allows us to define a simple, efficient, parsing process. We
first define two functions relative to the statetable: \textsf{action}$(s, t)$
returns the action for the state $s$ and token $t$
or \emph{error} if no such action exists; and \textsf{goto}$(s, N)$
returns the goto state for the state $s$ and the nonterminal $N$. We then define
a reduction relation $\lrarrow$ for $(\textit{parsing stack}, \textit{token
list})$ pairs with two reduction rules as shown in Figure~\ref{fig:lrreduction}.
A full LR parse $\lrarrowstar$ repeatedly applies the two $\lrarrow$ rules
until neither applies, which means that \textsf{action}$(s_n, t_0)$ is either:
$\textit{accept}$ (i.e.~the input has been fully parsed); or
$\textit{error}$ (i.e.~an error has been detected at the terminal $t_0$). A
full parse of an empty file takes a starting pair of $([0], [t_0 \ldots t_n, \$])$,
where state $0$ is expected to represent the entry point into the stategraph, $t_0 \ldots t_n$
is the sequence of input tokens, and $\$$ is the special End-Of-File (EOF) token.

\begin{figure}[t]
\small
\[
\infer[\textsc{LR Shift}]
      {([s0 \ldots s_n], [t_0 \ldots t_n]) \lrarrow ([s_0 \ldots s_n, s'], [t_1 \ldots t_n])}
      {\textsf{action}(s_n, t_0) = \textit{shift}\ s'}
\]
\vspace{-3pt}
\[
\infer[\textsc{LR Reduce}]
      {([s0 \ldots s_n], [t_0 \ldots t_n]) \lrarrow ([s_0 \ldots s_{n - \lvert \alpha \rvert}, s'], [t_0 \ldots t_n])}
      {(\textsf{action}(s_n, t_0) = \textit{reduce}\ N \colon \alpha)
       \wedge (\textsf{goto}(s_{n - \lvert \alpha \rvert}, N) = s')}
\]
\vspace{-15pt}
\caption{Reduction rules for $\lrarrow$ relative to $(\textit{parsing stack},
\textit{token list})$ pairs. \textsc{LR Shift}
advances the input by one token and grows the parsing stack, while
\textsc{LR Reduce} unwinds (`reduces') the parsing stack when a production is
complete before moving to a new (`goto') state.}
\label{fig:lrreduction}
\end{figure}


\section{\corchueloplus}
\label{corchueloplus}

The \citet{fischer79locally} family of error recovery algorithms has many
members --- far too many to cover them all in one paper (see
\citet{cerecke03phd} for a fairly comprehensive summary). We therefore start
with one of the more recent members -- \citet{corchuelo02repairing}. We first
explain the original algorithm (Section~\ref{corchuelo:orig}), although we use
different notation than the original, fill in several missing details, and
provide a more formal definition. We then
make two correctness fixes that ensure that the algorithm can always
find minimum cost repair sequences (Section~\ref{corchuelo:kimyi}). Since the original description
gives few details as to how the algorithm might best be implemented, we then
explain the steps we took to make a performant implementation
(Section~\ref{corchuelo:implementation}). We then show how the algorithm can
be extended to efficiently find the complete set of minimum cost repair sequences
(Section~\ref{corchuelo:allminimumcost}). This allows
us to make an algorithm less susceptible to the cascading error problem
(Section~\ref{cpctplus}): we refer to this final algorithm
as \corchueloplus.


\subsection{The original algorithm}
\label{corchuelo:orig}

As with all error recovery algorithms, \citet{corchuelo02repairing} is invoked
when an error is found in main parsing i.e.~when \textsf{action}$(s_n, i) =
\textit{error}$. Intuitively, the algorithm starts at the error state and tries
to find a minimum cost repair sequence consisting of: \textit{insert T}
(`insert a token of type T'), \textit{delete} (`delete the token at the current offset'),
or \textit{shift} (`skip over the token at the current offset without changing it'). The
algorithm completes successfully if it reaches an accept state or shifts
`enough' tokens ($N_\textit{shift}$; set at 3 in \citet{corchuelo02repairing}),
or unsuccessfully if it consumes `too many' tokens ($N_\textit{total}$; set at
10 in \citet{corchuelo02repairing}).

\begin{figure}[tb]
\small
\[
\infer[\textsc{CR Insert}]
      {([s_0 \ldots s_n], [t_0 \ldots t_n]) \crarrow (S', [t_0 \ldots t_n], [\textit{insert}~t])}
      {\textsf{action}(s_n, t) \ne error \wedge t \ne \${}
       \wedge ([s_0 \ldots s_n], [t, t_0 \ldots t_n]) \lrarrowstar (S', [t_0 \ldots t_n])}
\]
\vspace{-6pt}
\[
\infer[\textsc{CR Delete}]
      {(S, [t_0, t_1 \ldots t_n]) \crarrow (S, [t_1 \ldots t_n], [\textit{delete}])}
      {t_0 \ne \$}
\]
\vspace{-3pt}
\[
\hspace{-12pt}
\infer[\textsc{CR Shift 1}]
      {(S, [t_0 \ldots t_n]) \crarrow ([s_0 \ldots s_n], [t_j \ldots t_n], [\underbrace{\textit{shift} \ldots \textit{shift}}_j])}
      {%
\begin{array}{c}
(S, [t_0 \ldots t_n]) \lrarrowstar ([s_0 \ldots s_n], [t_j \ldots t_n])
 \wedge 0 < j \leq N_\textit{shifts}
\\
 j = N_\textit{shifts} \vee
 \textsf{action}(s_n, t_j) \in \{\textit{accept}, \textit{error}\} 
\end{array}}
\]
\vspace{-7pt}
\caption{The repair-creating reduction rules \cite{corchuelo02repairing}.
\textsc{CR Insert} finds all terminals reachable from the current state and
creates insert repairs for them (other than the EOF token `$\$$').
\textsc{CR Delete} creates deletion repairs if user defined input remains.
\textsc{CR Shift 1} parses at most $N_\textit{shift}$ tokens; if it reaches an accept or error
state, or parses exactly $N_\textit{shift}$ tokens, then a shift repair per
token shifted is created.}
\label{fig:corchuelo:reductions}
\vspace*{-10pt}
\end{figure}


\begin{figure}[tb]
\begin{multicols}{2}
\begin{lstlisting}[numbers=left]
def corchueloetal(pstack, toks):
  todo = [[(pstack, toks, [])]]
  cur_cst = 0
  while cur_cst < len(todo):
    if len(todo[cur_cst]) == 0:
      cur_cst += 1
      continue
    n = todo[cur_cst].pop()
    if action(n[0][-1], n[1][0]) == <!{\textrm{\textit{accept}}}!> \
       or ends_in_N_shifts(n[2]):
      return n
    elif len(n[1]) - len(toks) == N_total:
      continue
    for nbr in all_cr_star(n.0, n.1):
      if len(n[2]) > 0 and n[2][-1] == <!{\textrm{\textit{delete}}}!> \
         and nbr[2][-1] == <!{\textrm{\textit{insert}}}!>:
        continue
      cst = cur_cst + rprs_cst(nbr_rprs)
      for _ in range(len(todo), cst):
        todo.push([])
      todo[cst].append((nbr[0], nbr[1], \
                        n[2] + nbr[2]))
  return None

def rprs_cst(rprs):
  c = 0
  for r in rprs:
    if r == <!{\textrm{\textit{shift}}}!>: continue
    c += 1
  return c

def all_cr_star(pstack, toks):
  # Exhaustively apply the <!{$\crarrowstar$}!> relation to
  # (pstack, toks) and return the resulting
  # list of (pstack, toks, repair) triples.
\end{lstlisting}
\columnbreak
\vspace*{-18pt}
\caption{Our version of the \citet{corchuelo02repairing} algorithm. The main function
\texttt{corchueloetall} takes in a (\emph{parsing stack}, \emph{token list})
pair and returns: a (\emph{parsing stack}, \emph{token list}, \emph{repair
sequence}) triple where \emph{repair sequence} is guaranteed to be a minimum
cost repair sequence; or \texttt{None} if it failed to find a repair sequence.\\[9pt]
%
The algorithm maintains a todo list of lists (modelled
on \citet[p.~25]{cerecke03phd} rather than the suggestion
in \citet{corchuelo02repairing}); the first sub-list contains
search nodes of cost 0, the second sub-list contains search nodes of cost 1 and
so on. The todo list is initialised with the error parsing stack, remaining
tokens, and an empty repair sequence (line 2). If there are todo items left, a
lowest cost node $n$ is picked (line 8). If $n$ represents an accept state (line
9) or if the last $N_\textit{shifts}$ repairs are shifts (line 10), then $n$
represents a minimum cost repair sequence and the algorithm terminates
successfully (line 11). If $n$ has already consumed $N_\textit{total}$ tokens,
then it is discarded (lines 12, 13). Otherwise, $n$'s neighbours
are gathered using the $\crarrow$ relation (lines 14, 32--35). To avoid
duplicate repairs, \textit{delete} repairs never follow \textit{insert} repairs
(lines 16--18). Each neighbour has its repairs costed and is then
assigned to the correct todo sub-list (lines 19--23).\\[9pt]
%
The \texttt{rprs\_cst} function returns the cost of a repair sequence. Inserts
and deletes cost 1, shifts 0.}
\label{fig:corchuelo:algorithm}
\end{multicols}
\vspace*{-15pt}
\end{figure}

As with the original, we explain the approach in two parts. First is a new reduction relation
$\crarrow$ which defines when individual repairs are created
(Figure~\ref{fig:corchuelo:reductions}). Second is an algorithm which
determines when to use the $\crarrow$ relation (Figure~\ref{fig:corchuelo:algorithm}).
As well as several changes for clarity, the biggest difference is that
Figure~\ref{fig:corchuelo:algorithm} captures semi-formally what
\citet{corchuelo02repairing} explain in prose (spread amongst
several topics over several pages): perhaps inevitably
we have had to fill in several missing details. For example,
\citet{corchuelo02repairing} do not define what the cost of repairs is: for
simplicities sake, we define the cost of \textit{insert} and \textit{delete} as
1, and \textit{shift} as 0.\footnote{It is trivial to extend this to variable
token costs if desired, and our implementation supports this. However, it is
unclear whether non-uniform token costs are useful in practise
\cite[p.96]{cerecke03phd}.}

\laurie{do we need an example here? probably...}


\subsection{Ensuring that minimum cost repair sequences aren't missed}
\label{corchuelo:kimyi}

\textsc{CR Shift 1} has two flaws that mean that it is
unable to generate some minimum cost repair sequences.

\begin{figure}[tb]
\small
\[
\hspace{-12pt}
\infer[\textsc{CR Shift 2}]
      {(S, [t_0 \ldots t_n]) \crarrow ([s_0 \ldots s_n], [t_j \ldots t_n], [\underbrace{\textit{shift} \ldots \textit{shift}}_j])}
      {%
\begin{array}{c}
(S, [t_0 \ldots t_n]) \lrarrowstar ([s_0 \ldots s_n], [t_j \ldots t_n])
 \wedge 0 \leq j \leq N_\textit{shifts}
\\
 (j = 0 \wedge S \ne [s_0 \ldots s_n]) \vee j = N_\textit{shifts} \vee
 \textsf{action}(s_n, t_j) \in \{\textit{accept}, \textit{error}\}
\end{array}}
\]

\[
\infer[\textsc{CR Shift 3}]
      {(S, [t_0 \ldots t_n]) \crarrow (S', [t_j \ldots t_n], R)}
      {%
\begin{array}{c}
(S, [t_0 \ldots t_n]) \lrarrowstar (S', [t_j \ldots t_n])
 \wedge 0 \leq j \leq 1
\\
 (j = 0 \wedge S \ne S' \wedge R = [])
  \vee
  (j = 1 \wedge R = [\textit{shift}])
\end{array}
}
\]
\vspace{-10pt}
\caption{\textsc{CR Shift 2} fixes the problem that
\textsc{CR Shift} always forces a shift to occur, which misses repair sequences
whose final repair is a delete: it allows reductions to occur without
a corresponding shift. \textsc{CR Shift 3} fixes the problem that both
\textsc{CR Shift 1} and \textsc{CR Shift 2} generate multiple shift
repairs in one go, skipping `intermediate' repair positions. \textsc{CR
Shift 3} generates at most one shift, exploring all intermediate repair
positions.}
\label{fig:corchuelo:kimyi}
\vspace*{-8pt}
\end{figure}

\begin{figure}

\begin{minipage}[t]{0.4\textwidth}
\begin{tabular}{p{0.02\textwidth}p{0.38\textwidth}}
\begin{subfigure}{0.02\textwidth}
\caption{}
\label{fig:crshift2:orig}
\end{subfigure}
&
\begin{minipage}[t]{0.45\textwidth}
\vspace{-7pt}
\begin{lstlisting}
Delete, Delete
Delete, Shift, Insert "PLUS"
Delete, Shift, Insert "MULT"
\end{lstlisting}
\end{minipage}
\\
\begin{subfigure}{0.02\textwidth}
\vspace{-5.5pt}
\caption{}
\label{fig:crshift2:fix1}
\end{subfigure}
&
\begin{minipage}[t]{0.38\textwidth}
\vspace{-10pt}
\begin{lstlisting}
Delete, Shift, Delete
\end{lstlisting}
\end{minipage}
\end{tabular}
\end{minipage}
%
\begin{minipage}[t]{0.48\textwidth}
\begin{tabular}{p{0.02\textwidth}p{0.45\textwidth}}
\begin{subfigure}{0.02\textwidth}
\vspace{-6.25pt}
\caption{}
\label{fig:crshift2:fix2}
\end{subfigure}
&
\begin{minipage}[t]{0.45\textwidth}
\vspace{-10.25pt}
\begin{lstlisting}
Insert "INT", Shift, Delete
Insert "INT", Shift, Shift, Delete
Insert "INT", Shift, Shift, Insert "PLUS"
Insert "INT", Shift, Shift, Insert "MULT"
\end{lstlisting}
\end{minipage}
\end{tabular}
\end{minipage}

\vspace{-10pt}
\caption{Repair sequences for the input `\texttt{+ 2 3}' (where an error is
found at the first token) relative to the grammar from
Figure~\ref{fig:exprgrammar}. (\subref{fig:crshift2:orig}) shows the three repair
sequences that the original \textsc{CR Shift 1} rule is capable of finding.
(\subref{fig:crshift2:fix1}) shows the additional repair sequence that is found by \textsc{CR Shift 2}.
(\subref{fig:crshift2:fix2}) shows the four additional repair sequences that the
\texttt{CR Shift 3} rule is capable of finding.}
\label{fig:crshift2:example}
\end{figure}

First, \textsc{CR Shift 1} requires at least one token to be shifted. However,
after a non-shift repair, all that may be required is one or more reductions in order to
reach an \textit{accept} state. \textsc{CR Shift 2} in Figure~\ref{fig:corchuelo:kimyi}
shows the two-phase fix which addresses this problem.
We first change the condition $0 < j \leq N_\textit{shifts}$ to $0 \leq j \leq
N_\textit{shifts}$ (i.e. we don't force the LR parser to consume any tokens).
However, this then opens the possibility of an infinite loop. We avoid this by
saying that, if the input is not advanced, the parsing stack must have changed
($j = 0 \wedge S \ne S'$). Put another way, in either case, we require progress
to be made, even if that progress does not require consuming any input.

Second, \textsc{CR Shift 1} and \textsc{CR Shift 2} generate multiple shifts
at a time. This cause them to skip intermediate
positions from which minimum cost repair sequences may be found
(this problem, and the basis of a fix, derive from \cite[p.~12]{kimyi10astar},
though their suggestion suffers from the problem fixed by \textsc{CR Shift 1}).
The solution is simple: at most one shift can be generated at any one
time, so that intermediate positions are not missed. \textsc{CR Shift 3} in
Figure \ref{fig:corchuelo:kimyi} (as well as incorporating the fix from
\textsc{CR Shift 2}) generates at most one shift repair at a time. Relative to
\textsc{CR Shift 1}, it is simpler, though it also inevitably slows down the
search for repair sequences, as more are tried.

Examples of the additional repair sequences that \textsc{CR Shift 2} and
\textsc{CR Shift 3} can produce are shown in Figure~\ref{fig:crshift2:example}. Although
in this case \textsc{CR Shift 1} produces some minimum cost repair
sequences, in some cases it finds none, while \textsc{CR Shift 2} or \texttt{CR
Shift 3} find some. There is also a subtle difference in the style of repair
sequences found by the various rules as shown in
Figure~\ref{fig:crshift2:example}: \textsc{CR Shift 3} is much more likely to
produce repair sequences that don't require deleting user input.


\subsection{Implementation considerations}
\label{corchuelo:implementation}

The definitions we have given thus far do not obviously lead to
an efficient implementation and \citet{corchuelo02repairing} give few useful
hints. We found that three techniques, two of them unique to our work, were both
effective at improving performance while being simple to implement.

First, rather than use a general queue data-structure (probably based on a
tree), we use a similar queue data-structure to
\citet[p.~25]{cerecke03phd}. This consists of one sub-list per cost (i.e.~ the
first sub-list contains search nodes
of cost 0, the second sub-list contains search nodes of cost 1 and so on).
Since we always know what cost we are currently investigating,
finding the next todo element requires only a single \texttt{pop}
(line 8 of Figure~\ref{fig:corchuelo:algorithm}). Similarly,
adding elements requires only an \texttt{append} to the relevant sub-list
(lines 18, 21, 22). This
data-structure works well in our situation because costs never get
big (double digits is unusual for real-world
grammars); and each neighbour generated from a node with cost $c$ has
have a cost $\geq c$ (i.e.~we never have to search previous cost sub-lists).

\label{duplicatenodes}
Second, the algorithm often creates duplicate nodes due to
$\lrarrowstar$ repeatedly using the \textsc{LR Reduce} rule (i.e.~two distinct parsing
stacks $P$ and $P'$ can, after multiple reductions, both reduce to $Q$). We
therefore modify the queue data-structure to a
list-of-ordered-hashsets\footnote{An ordered hashset preserves insertion order,
and thus allows list-like integer indexing as well as hash-based lookups.}. This has
near-identical \texttt{append} / \texttt{pop} performance to a normal list, but
weeds out duplicates with near-identical performance to an unordered hashset.
Although this cannot detect duplicates when the relevant node has already been popped from
the todo list, it finds the vast majority, while avoiding the impractical memory overhead of
remembering all past nodes. Depending on the example, this can lead to 20\% or
more of nodes being detected as duplicates, with a commensurate effect on
performance.

\label{cactusnodes}
Third, we do not use lists to represent parsing stacks and repair sequences
as Figure~\ref{fig:corchuelo:algorithm} may suggest. We found
that this representation consumes noticeably more memory, and is slightly less
efficient, than using parent pointer trees (often called `cactuses').
Every node in such a tree has a reference to a single parent (or \texttt{null} for the
root node) but no references to child nodes. Since our implementation is written
in Rust -- a language without garbage collection -- we use reference
counting (a parent is only freed when it is not in a todo list and
no children point to it). When the error recovery algorithm starts, it
converts the main parsing stack (a list) into a parent pointer tree; and
repair sequences start as empty parent pointer trees. The $\crarrow$ part
of our implementation thus operates exclusively on parent pointer trees.
Although this does mean that neighbouring nodes are scattered throughout
memory, it naturally leads to memory sharing, which recovers some of
the good cache behaviour; it also seems to be a good
fit with modern \texttt{malloc} implementations, which are particularly
efficient when allocating and freeing objects of the same size.
However, it is quite possible that a different representation would be
better for a garbage collected language.


\subsection{Finding all minimum cost repair sequences}
\label{corchuelo:allminimumcost}

The algorithm as described to this point non-deterministically completes as soon
as it has found a single minimum cost repair sequence.
In this section we show how the we can efficiently find
the complete set of minimum cost repair sequences.

The basis of a solution is simple: when a repair sequence of cost $c$ is found to
be successful, we discard all repair sequences with cost $> c$, and continue
exploring nodes in cost $c$ (including, transitively, all neighbours that are
also of cost $c$), recording each successful node we encounter.

While this works, it can substantially worsen performance, because there can be
many remaining nodes in $c$, which may, transitively, have many neighbours.
Fortunately, we can substantially improve performance by not only removing
duplicate nodes but merging together
\emph{compatible} nodes, preserving their distinct repair sequences while still
reducing the search space. Two nodes are compatible if: their
parsing stacks are identical; they both have an identical amount of input
remaining; and their repair sequences are compatible. Two repair sequences
are compatible:

\begin{enumerate}
   \item if they both end in the same number ($n \ge 0$) of shifts.
   \item if one repair sequence ends in a delete, the other repair sequence also
ends in a delete.
\end{enumerate}

The first condition is a result of having to take into account
that a node can be deemed successful in two ways: if it reaches an accept state (line 9,
Figure~\ref{fig:corchuelo:algorithm}) or if it ends in $N_\textit{shifts}$ shift
repairs (line 10). The former case is only affected by the parsing stack (and is
thus unaffected by compatible nodes which have identical parsing stacks),
but the latter requires care with the number of shift repairs at
the end of the sequence.

The second condition relates to the weak form of compatible merging inherited
from \citet[p.~8]{corchuelo02repairing}: delete repairs are never followed by an
insert (see Figure~\ref{fig:corchuelo:algorithm}) since [\textit{delete},
\textit{insert x}] always leads to the same node as [\textit{insert x},
\textit{delete}]. Although this is largely subsumed
by compatible node merging, we keep it as a separate optimisation because it helps to slightly
lessen worse case performance: it is the most common way of creating compatible nodes; our
use of the todo list means that we would not catch every case; and the
duplicate repair sequences are uninteresting from a user perspective, so we
would have to weed them out later anyway. The latter case is important because
though merging of compatible states is a substantial optimisation,
each merge consumes memory, which is wasted if we later throw it away.

Our implementation of compatible nodes subsumes our detection of duplicate nodes
(Section~\ref{duplicatenodes}), relying on the fact that our todo data-structure
is a list-of-ordered-hashsets. Whereas duplicate detection implicitly considered
a node's entire contents for hashing and equality, we make two changes: we only
hash a node's parsing stack and remaining input (i.e.~we do not hash a search
node's repairs): and we loosen node equality to allow compatible
repair sequences to be be considered as equal. This leads to efficient
detection of compatible nodes.

Conceptually, merging two nodes together is simple: each search node simply
needs to store a set of repair sequences, each of which is updated as further
repairs are found. However, this is an extremely inefficient representation as
the sets involved need to be copied and extended as each new repair is found.
Instead, we use a representation which relies on parent pointer trees (for the
same reasons as in Section~\ref{cactusnodes}).
The basic idea is that search nodes no longer reference a parent pointer tree of
repairs directly, but instead a parent pointer tree of \emph{repair merges}. A
repair merge is a pair (\textit{repair}, \textit{parents})
where \textit{repair} is a plain repair and \textit{parents} is a set of
parent repair merges. A repair merge (\textit{rpr}, $p_1 \ldots p_n$) can
be recursively expanded into a set of repair sequences
$\{[$\textit{rpr}$] + p_1$ \ldots $[$\textit{rpr}$] + p_n\}$. We further compact
the representation, and increase sharing, by representing the \textit{parents}
set as a parent pointer tree (we do not bother weeding out duplicates at this
stage).


\subsection{Putting together the \corchueloplus algorithm}
\label{cpctplus}
\label{rankingrepairs}

The \textsc{CR Shift 3} rule and our ability to find the complete
set of minimum cost repair sequences are two of the three key ingredients
in our our new error recovery algorithm. In this subsection
we make one further addition to the algorithm, calling the result \corchueloplus (in
homage to its roots in \citet{corchuelo02repairing}).

\begin{figure}[t]
\begin{tabular}{p{0.02\textwidth}p{0.45\textwidth}p{0.02\textwidth}p{0.45\textwidth}}
\begin{subfigure}{0.02\textwidth}
\caption{}
\label{lst:ranking:java}
\end{subfigure}
&
\begin{minipage}[t]{0.45\textwidth}
\vspace{-7pt}
\begin{lstlisting}
class C {
    T x = 2 +
    T y = 3;
}
\end{lstlisting}
\end{minipage}
&
\begin{subfigure}{0.02\textwidth}
\caption{}
\label{lst:ranking:output}
\end{subfigure}
&
\begin{minipage}[t]{0.45\textwidth}
\vspace{-7pt}
\begin{lstlisting}
Error at line 3 col 7. Repairs found:
  Insert "COMMA"
\end{lstlisting}
\end{minipage}
\end{tabular}
\vspace{-10pt}
\caption{An example showing how the ranking of repair sequences can lessen the
the cascading error problem. The Java example (\subref{lst:ranking:java}) leads
to a parsing error on line 3 at `\texttt{y}', with three minimum cost repair
sequences found: [\textit{insert} \texttt{,}], [\textit{insert} \texttt{?}], and
[\textit{insert} \texttt{(}]. These repair sequences are then ranked by how far
they allow parsing to continue successfully. [\textit{insert} \texttt{,}] leads
to the rest of the file being parsed without further error. [\textit{insert}
\texttt{?}] causes a cascading error at `\texttt{;}` which must then be resolved
by completing the ternary expression started by `?' (e.g.~changing line 3 to
\texttt{T ? y : this;}). Similarly, [\textit{insert} \texttt{(}] causes a
cascading error at `\texttt{;}' which must then be resolved by inserting a
`\texttt{)}'. Since [\textit{insert} \texttt{,}] is ranked more highly than the
other repair sequences, the latter are discarded, leading to the parsing output shown
in (\subref{lst:ranking:output}). javac in contrast attempts to insert
`\texttt{;}' before `\texttt{y}' causing a cascading error on the next token.}
\label{fig:ranking}
\end{figure}

The final step in our new algorithm allows us to somewhat compensate for the
small value of $N_\textit{shifts}$. This value has to be a small integer (in our
case 3) because each additional token searched exponentially increases the
search space. Thus the repair sequences we find can be less than ideal when a
larger amount of input is considered. Fortunately, we can make use the existence
of the complete set of minimum cost repair sequences to lessen this weakness.
After this set has been generated, we rank it by how far repair sequences allow
parsing to successfully continue, up to a limit of $N_\textit{try}$ tokens
(which we somewhat arbitrarily set at 250). Since multiple repair sequences may
be ranked equally highly, we non-deterministically select one, apply its repairs
to the input, and continue parsing as normal. Particularly on real-world
grammars, this can substantially decrease the chances of the chosen repair
sequence causing cascading errors (see Figure~\ref{fig:ranking} for an example).
It also does so for very little additional computational cost as the complete set of
minimum cost repair sequences is much smaller than the number of nodes
searched.


\subsection{A complete example}

\laurie{need a complete example with all intermediate steps for \corchueloplus}


\section{The Kim and Yi algorithm}
\label{kimyi}

Algorithms in the \citet{fischer79locally} family have unbounded worse case
performance, which is easily seen on inputs with unbalanced brackets
(e.g.~in expressions such as `\texttt{x = f(();}'): each additional unmatched
bracket exponentially increases the search space. For example, on a modern machine
with a Java grammar, the \corchueloplus algorithm takes about 0.3s to find
the complete set of minimum cost repair sequences for 3 unmatched brackets, 3s
for 4 unmatched brackets, and 6 unmatched brackets caused our 32GiB test machine
to run out of RAM.

While such cases are fairly rare, it would be better if they did not occur at
all. \citet{kimyi10astar} propose a new error recovery -- which is in the
\citet{fischer79locally} family, but by far its most radical member --  which
claims to almost entirely remove such performance problems. This work has not,
to the best of our knowledge, received prior attention in the community, despite
this promise. In this section we provide a brief overview of this work: we
give enough information to understand the details relevant to this paper but
we elide several details which a real
implementation would need to consider. We also adjust the algorithm's style to
match this paper's and correct several minor mistakes. We then show that the
algorithm contains two serious flaws
which mean that it misses minimum cost repair sequences
(Section~\ref{kimyi:flaws}). These flaws are not easily fixed, but parts of the
approach serve as inspiration for our \mf error recovery algorithm.


\subsection{An overview of the algorithm}
\label{kimyi:overview}

The \citet{kimyi10astar} algorithm takes \citet{corchuelo02repairing} as a base,
adding two significant novelties: it uses the A*
algorithm~\cite{hart68astar} to delay, and thus often to avoid, unpromising
search nodes; and it can insert non-terminals, sidestepping many inserts
of terminals entirely. This allows examples with
thousands of unmatched brackets to be repaired in a few seconds.

Since the A* algorithm is not a particularly common one in parsers,
we first start with a brief recap. The A* algorithm finds minimum cost paths through
a graph where each edge has an associated cost $c$. The current known lowest
cost to reach a node $n$ from the start node is represented by $d(n)$. A
heuristic $h(n)$ returns an estimate of the additional cost needed to reach a success node from
$n$. The heuristic must be `admissible': it must
never overestimate the cost to reach a success node; however, it may safely
underestimate (i.e.~the simplest safe heuristic is $h(n) = 0$). A priority queue is
used to order nodes by their $d(n) + h(n)$. On
each iteration the node in the queue with the lowest $d(n) + h(n)$ is selected,
its neighbours explored and each entered into the priority queue. The search
terminates when the first success node is found.

\begin{figure}
\small
\[
\infer[\textsc{KY Insert}]
      {([s_0 \ldots s_n], [t_0 \ldots t_n], t) \kyarrow ([s_0 \ldots s_n, s'],
       [t_0 \ldots t_n], \top, [\textit{insert}~t], d)}
      {s_n \xrightarrow{\text{~~t~~}} s' \wedge t \ne \${} \wedge d = \textsf{dist}(s', t_0) < \infty)}
\]
\vspace{-3pt}
\[
\infer[\textsc{KY Reduce}]
      {([s0 \ldots s_n], [t_0 \ldots t_n], \bot) \kyarrow ([s_0 \ldots s_{n - \lvert \alpha \rvert}, s'],
       [t_0 \ldots t_n], \bot, [\textit{insert}~\beta_0 \ldots \textit{insert}~\beta_n], 0)}
      {[N: \alpha \bullet \beta_0 \ldots \beta_n] \in \textsf{core}(s_n)
       \wedge \textsf{goto}(s_{n - \lvert \alpha \rvert}, N) = s'}
\]
\vspace{-4pt}
\[
\infer[\textsc{KY Delete}]
      {(S, [t_0, t_1 \ldots t_n], \bot) \kyarrow (S, [t_1 \ldots t_n], \bot, [\textit{delete}], 0)}
      {t_0 \ne \$}
\]
\vspace{-3pt}
\[
\hspace{-12pt}
\infer[\textsc{KY Shift}]
      {(S, [t_0 \ldots t_n], t) \kyarrow (S', [t_1 \ldots t_n], \bot, [\textit{shift}], 0)}
      {(S, [t_0 \ldots t_n]) \lrarrowstar (S', [t_1 \ldots t_n])}
\]
\vspace{-12pt}
\caption{The repair-creating rules for \citet{kimyi10astar} operate from (\textit{parsing
stack}, \textit{token list}, \textit{t}) to (\textit{parsing stack},
\textit{token list}, \textit{t}, \textit{repairs}, \textit{heuristic}) tuples.
\textsc{KY Insert} finds terminals in the stategraph
($\xrightarrow{\text{~~t~~}}$) which lead to a state with a finite distance to
the next input token as \textit{insert} repairs. \textsc{KY Reduce} finds items
in the core (or `kernel') stategraph which would lead to a reduction if the
sequence of symbols (terminals and non-terminals) $\beta_0 \ldots \beta_n$ were
to be found; it then optimistically creates insert repairs for each, and
performs the corresponding reduction. \textsc{KY Delete} is virtually identical
to \textsc{CR Delete}. \textsc{KY Shift} is similar to \textsc{CR Shift} but
has to always shift a single symbol to avoid creating repairs which
duplicate those found by \textsc{KY Reduce}.}
\label{fig:kimyi:rules}
\end{figure}

The \citet{kimyi10astar} algorithm itself comes in two main parts. First is a
relation $\kyarrow$ which defines when individual repairs are created
(Figure~\ref{fig:kimyi:rules}). Unlike the $\crarrow$ relation, these rules are
from (\textit{parsing stack}, \textit{token list}, \textit{t}) to
(\textit{parsing stack}, \textit{token list}, \textit{t}, \textit{repairs},
\textit{heuristic}) tuples. Of these values, $t$ is the least intuitive: in essence,
it counteracts the fact that, as we will soon see, the A* heuristic used doesn't
take into account reductions or deletions. Since \textsc{KY Insert} is the only
rule which uses the heuristic, it sets $t = \top$ to prevent
\textsc{KY Reduce} and \textsc{KY Delete} from making the heuristic inadmissible.
Only \textsc{KY Shift} can turn $t = \top$ into $\bot$.

\begin{figure}[t]
\begin{adjustbox}{valign=t,minipage=.52\textwidth}
\begin{lstlisting}[numbers=left]
def mk_dist(sgraph, terms, eof_idx):
  table = [<!$\infty$!>] * len(sgraph) * len(terms)
  table[sgraph.accept_state * len(terms) \
        + eof_idx] = 0
  while True:
    chgd = False
    for i in range(sgraph.len_states):
      for sym, end_st in sgraph.edges(i):
        if isinstance(sym, Nonterminal):
          d = min_sentence_cost(sym.nt_idx)
        else:
          assert isinstance(sym, Terminal)
          off = i * len(terms) + sym.term_idx
          if table[off] != 0:
            table[off] = 0
            chgd = True
          d = 1
        for j in range(len(terms)):
          this_off = i * len(terms) + j
          end_off = end_st * len(terms) + j
          if table[end_off] != <!$\infty$!>:
            other_cost = table[end_off] + d
            if other_cost < table[this_off]:
              table[this_off] = other_cost
              chgd = True
    if not chgd:
      break
\end{lstlisting}
\end{adjustbox}%
\begin{adjustbox}{valign=t,minipage=.48\textwidth}
\vspace{-9.5pt}
\caption{A fixed-point algorithm for the \textit{dist(s, t)} function.
The algorithm takes in the stategraph, an (arbitrarily but fixed) ordered list of
terminals, and the index of the \$ terminal (line 1), and returns a table with
one column per terminal and one row per state. Every entry starts
at $\infty$ (line 2) except for the accept state's (i.e.~the only state with
an \textit{accept} action) `\$' terminal which is set
to 0 (lines 3, 4): entries monotonically reduce to a minimum of 0. For each
state $i$ in the stategraph (line 7), the algorithm explores its outgoing edges
(via the \texttt{edges} function (line 8)), each of which: is labelled with a
symbol \texttt{sym}; and points to another state with index \texttt{end\_st}. If
the edge's symbol is a terminal then by definition the cost of reaching that
terminal from state $i$ is 0 (lines 13-16). We then calculate the cost of the
edge: if the label's symbol is a nonterminal, we return the cost of the minimal
sentence matching that nonterminal (line 10); if a terminal we return a cost of 1 (line 17).
If the cost of $t$ in \texttt{end\_st} plus the distance to \texttt{end\_st} is
lower than the cost of $t$ in $i$ then we update the latter (lines 19--25).
A table created by this algorithm can be seen in Figure~\ref{fig:kimyi:flaw:dist}.}
\label{fig:kimyi:dist}
\end{adjustbox}
\end{figure}

The A* heuristic used is \textsf{dist(s, t)} which is best
summarised as follows: if we are in parsing state $s$, what is the cost of the
minimum route through the stategraph to a state $s'$ (where $s$ and $s'$ may be
the same state), where $s'$ has the terminal $t$ as an outgoing edge? If no such route
exists, \textsf{dist} returns $\infty$. While \citet{kimyi10astar} provide a
specification of \textsf{dist}, we provide a fixed-point algorithm
(Figure~\ref{fig:kimyi:dist}). The result is cached in a table at the point
of grammar generation with entries looked up during the search. Note that we
assume the existence of a function \textsf{min\_sentence\_cost(N)} which returns
the length of the minimum sentence(s) which match the non-terminal $N$: this
function is a relatively simple variation of the traditional parsing nullable
computation.


\subsection{Problems with the algorithm}
\label{kimyi:flaws}

\begin{figure}
\begin{adjustbox}{valign=t,minipage=.04\textwidth}
\begin{subfigure}{0.04\textwidth}
\caption{}
\label{fig:kimyi:flaw:grammar}
\end{subfigure}
\end{adjustbox}%
\begin{adjustbox}{valign=t,minipage=.18\textwidth}
\begin{lstlisting}
S: T 'b' 'c';
T: 'a';
\end{lstlisting}
\end{adjustbox}%
\begin{adjustbox}{valign=t,minipage=.04\textwidth}
\begin{subfigure}{0.04\textwidth}
\caption{}
\label{fig:kimyi:flaw:stategraph}
\end{subfigure}
\end{adjustbox}%
\begin{adjustbox}{valign=t,minipage=.35\textwidth}
\begin{lstlisting}
0: [^ -> . S, {'$'}]
   S -> 2
   'A' -> 3
   T -> 1
1: [S -> T . 'B' 'C', {'$'}]
   'B' -> 4
2: [^ -> S ., {'$'}]
3: [T -> 'A' ., {'B'}]
4: [S -> T 'B' . 'C', {'$'}]
   'C' -> 5
5: [S -> T 'B' 'C' ., {'$'}]
\end{lstlisting}
\end{adjustbox}%
\begin{adjustbox}{valign=t,minipage=.04\textwidth}
\begin{subfigure}{0.04\textwidth}
\caption{}
\label{fig:kimyi:flaw:dist}
\end{subfigure}
\end{adjustbox}%
\begin{adjustbox}{valign=t,minipage=.3\textwidth}
\small
\begin{tabular}{rcccc}
\toprule
      & \multicolumn{4}{c}{$t$} \\
        \cmidrule(lr){2-5}
$s$ & \texttt{a} & \texttt{b} & \texttt{c} & \$ \\
\midrule
0 & 0 & 1 & 2 & 3 \\
1 & $\infty$ & 0 & 1 & $\infty$ \\
2 & $\infty$ & $\infty$ & $\infty$ & 0 \\
3 & $\infty$ & $\infty$ & $\infty$ & $\infty$ \\
4 & $\infty$ & $\infty$ & 0 & $\infty$ \\
5 & $\infty$ & $\infty$ & $\infty$ & $\infty$ \\
\bottomrule
\end{tabular}
\end{adjustbox}
\caption{\laurie{stategraph needs to be drawn} Given the grammar in
(\subref{fig:kimyi:flaw:grammar}) and the input
`c' \citet{kimyi10astar} is unable to find any repair sequences while \corchueloplus
is able to find a repair seqence [\textit{insert a}, \textit{insert
b}]. The grammar's stategraph is shown in
(\subref{fig:kimyi:flaw:stategraph}) and the \textit{dist} table in
(\subref{fig:kimyi:flaw:dist}). The search starts in state 0: \textsc{KY Insert}
and \textsc{KY Delete} both match (the latter an uninteresting dead-end which we
ignore). The new \textsc{KY Insert} search node is found via the edge
from state 0 labelled with terminal $a$: this moves the search to state $3$,
with a heuristic $\textsf{dist(0, `c')} = 2$, $t = \top$, and a repair [\textit{insert a}]. However, no
rules match the new search node: there are no edges labelled with terminals from
state 3; \textsc{KY Reduce} is not applicable since $t = \top$; and \textsc{KY
Shift} is not applicable since the next token in the user's input is `c' which,
even after reductions, cannot be reached from state 3.}
\label{fig:kimyi:flaw}
\end{figure}

The combination of the $\kyarrow$ rules (in particular \textsc{KY Reduce}'s
ability to insert nonterminals) and the \textsf{dist} function lead to dramatic
performance improvements as reported by \citet{kimyi10astar}. Unfortunately the
algorithm contains two flaws which lead it to produce incorrect
results.

The first flaw is that the \textsf{dist} heuristic does not take into
account reductions or deletions: hence the heuristic is only valid for chains of
inserts via \textsc{KY Insert}. The second flaw results from trying to fix the
first: the $t$ part of the $\kyarrow$ relation is a hack to ensure that
\textsc{KY Reduce} and \textsc{KY Delete} cannot match when the heuristic $> 0$.
Unfortunately this hack is too restrictive, sometimes trapping the search in
parsing states from which it cannot escape, and sometimes stopping it from
searching states which would produce a lower cost repair sequence.
Figure~\ref{fig:kimyi:flaw} shows an example where the search gets trapped and
the algorithm is unable to find a repair sequence.
These flaws also cause the algorithm to return non-minimum cost repair
sequences. For example, given the grammar \texttt{S: 'a' 'b' 'd' | 'a' 'b' 'c'
'a' 'a' 'd';} and the input `a c d', the algorithm incorrectly returns the repair sequence
[\textit{insert b}, \textit{shift}, \textit{insert a}, \textit{insert a}]
instead of the minimum cost repair sequence [\textit{insert b}, \textit{delete}].
In both cases, \corchueloplus correctly finds minimum cost repair sequences.

Both flaws can be fixed by revisiting an old friend: if we apply the same change to
\textsc{KY Shift} as we did to \textsc{CR Shift} (see
Figure~\ref{fig:corchuelo:kimyi}), the problem disappears. The reason this works
is that if \texttt{KY Shift} can perform reductions without having to consume
input, then the search can never get trapped as it did in
Figure~\ref{fig:kimyi:flaw}. Unfortunately applying the \textsc{CR Shift 3} fix
to \textsc{KY Shift} turns the \citet{kimyi10astar} algorithm into a slower
version of \citet{corchuelo02repairing}, since reductions are now duplicated
between \textsc{KY Reduce} and \textsc{KY Shift}. Removing \textsc{KY Reduce}
turns the algorithm into an almost literal copy of \citet{corchuelo02repairing},
with the mostly minor difference that \textsc{CR Insert} operates on the
statetable and \textsc{KY Insert} on the stategraph.\footnote{Though note that
for parsers which allow conflict resolution, such as Yacc, this means that
\textsc{KY Insert} can produce results which can't be parsed by the
statetable~\cite[p.~53, 54]{cerecke03phd}.}. As this may suggest, we have been
unable to find fixes to the algorithm that maintain its claimed performance
properties.


\section{\mf}
\label{mf}

In this section we present a new recovery algorithm \mf: the motivation behind
this algorithm is to see if the A* algorithm and a heuristic can be developed
that do not compromise correctness. As with \corchueloplus, \mf finds the
complete set of minimum cost repair sequences, although it uses different
reduction rules and the A* algorithm to speed up the search. While
\corchueloplus and \mf find precisely the same repair sequences, \mf does so
faster. However, \mf requires more up-front calculations, that require slightly
more implementation effort: \mf is approximately 950LoC whereas \corchueloplus
is approximately 700LoC.

In this Section, we first provide an overview of the algorithm
(Section~\ref{mf:overview}) before describing in detail the steps needed to
calculate the new \texttt{dyn\_dist} heuristic (Section~\ref{mf:dyn_dist}).


\subsection{An overview of \mf}
\label{mf:overview}

\begin{figure}[t]
\small
\[
\infer[\textsc{MF Insert}]
      {([s_0 \ldots s_n], [t_0 \ldots t_n])
       \mfarrow ([s_0 \ldots s_n, s'], [t_0 \ldots t_n], [\textit{insert}~t], d)}
      {\textsf{action}(s_n, t) = \textit{shift}~s' \wedge t \ne \${}
       \wedge d = \textsf{dyn\_dist}(s', t_0) < \infty}
\]
\vspace{-3pt}
\[
\infer[\textsc{MF Reduce}]
      {([s0 \ldots s_n], [t_0 \ldots t_n]) \mfarrow ([s_0 \ldots s_{n - \lvert \alpha \rvert}, s'],
       [t_0 \ldots t_n], [], d)}
      {N: \alpha \in \textsf{core\_reduces}(s_n)
       \wedge \textsf{goto}(s_{n - \lvert \alpha \rvert}, N) = s'
       \wedge d = \textsf{dyn\_dist}(s', t_0) < \infty}
\]
\vspace{-4pt}
\[
\infer[\textsc{MF Delete}]
      {(S, [t_0, t_1 \ldots t_n]) \kyarrow (S, [t_1 \ldots t_n], [\textit{delete}], d)}
      {t_0 \ne \$
       \wedge d = \textsf{dyn\_dist}(s_n, t_1) < \infty}
\]
\vspace{-3pt}
\[
\hspace{-12pt}
\infer[\textsc{MF Shift}]
      {([s_0 \ldots s_n], [t_0, t_1 \ldots t_n])
       \mfarrow ([s_0 \ldots s_n, s'], [t_1 \ldots t_n], [\textit{shift}], d)}
      {\textsf{action}(s_n, t_0) = \textit{shift}~s'
       \wedge d = \textsf{dyn\_dist}(s', t_1) < \infty}
\]
\vspace{-12pt}
\caption{The repair-creating rules for \mf. \textit{dyn\_dist} is the \mf A*
heuristic: unlike \citet{kimyi10astar}, every rule makes use of the heuristic.
\textit{nonterm\_reduces}($s_n$) returns the set of non-terminals which are
reduced by state $s_n$ (since the set naturally weeds out duplicates, this
avoids the problem that the statetable for state $s_n$ may reference nonterminal
$R$ repeatedly).}
\label{fig:mf:rules}
\end{figure}

We introduce a new reduction relation $\mfarrow$, whose rules are shown in
Figure~\ref{fig:mf:rules}. There are two main features to these rules: they do
not use the $\lrarrow$ (in this sense being closer to \citet{mckenzie95error}
than either \citet{corchuelo02repairing} or \citet{kimyi10astar}); and each rule
uses a new A* heuristic \textsf{dyn\_dist} which takes into account reductions
and deletions.


\subsection{\texttt{dyn\_dist}}
\label{mf:dyn_dist}


\section{Experiment}
\label{experiment}

\subsection{Methodolgy}

\subsection{Results}


\section{Related work}

Error recovery techniques are so numerous that there is no
definitive reference or overview of them. However, \citet{degano95comparison}
contains an overall historical analysis and \citet{cerecke03phd} an excellent
overview of many of the approaches which build on \citet{fischer79locally}. Both
must be supplemented with more recent works, such as those we have cited in this
paper.

The biggest limitation of error recovery algorithms in the
\citet{fischer79locally} family is that they are local: they find repairs at the
point that an error is discovered, which may be later in the file than the cause
of the error. Thus even when they successfully recover from an error, the repair
sequence reported may be very different from the fix the user considers
appropriate (note that this is distinct from the cascading error problem,
which our ranking of repair sequences in Section~\ref{rankingrepairs} partly
addresses). Perhaps the most common -- and without doubt the most frustrating
-- example of this is missing a \texttt{\}} character within the method of a
Java-like languages. \citet{santos18syntax} use
machine learning to train a system on syntactically correct programs: when a
syntax error is encountered, they use their model to suggest appropriate global
fixes. Although they also use \laurie{the same blackbox data we do} their
experimental methodology is very different: they are stricter, in that they aim
to find exactly the same type of repair as the human user actually
applied themselves; but also looser, in that they only
consider errors which can be fixed by a single token (discarding 42\% of
the data \cite[p.~8]{santos18syntax}) whereas we attempt to fix errors which
span multiple tokens. It is thus difficult to directly compare their results to
ours. However, by the high bar they have set themselves, they are able to repair
52\% of single-token errors (i.e.~about 30\% of all possible errors; for
reference, we repair \laurie{XXX\%}). It seems likely that future machine
learning approaches will improve upon this figure, although the size of the
problem space suggests it will be hard to get close to 100\%{}. It seems plausible
that an ideal system will mix both deterministic approaches (such as ours, which
has a high chance of finding a good-enough recovery) with
probabilistic approaches (which have a moderate chance of finding a perfect
recovery). There may be several shades of grey, leading to a system
with multiple error recovery sub-approaches (in similar fashion to \citet{deJonge12natural}).

Although one of our paper's aims is to find the complete set of minimum cost repair sequences,
it is unclear how best to present them to users, leading to questions such as:
should they be simplified? should a subset be presented? and so on. There is a
body of work which has tried to understand how best to structure compiler error
messages (normally in the context of those learning to program). However, the
results are hard to interpret: some studies find that more complex error
messages are not useful \cite{nienaltowski08error}, while others suggest they
are \cite{prather17novices}. It is unclear to us what the right approach might be.

While the programming language world has largely forgotten the approach of
\citet{aho72minimum}, there are a number of successor works, most recently that
of~\citet{rajasekaran16error}. These improve on the time complexity, though none
that we are aware of address the issue of how to present what has been done to
the user.

The approach of \citet{mckenzie95error} is similar to
\citet{corchuelo02repairing}, although the former cannot incorporate shift
repairs. It tries harder than \corchueloplus to prune out pointless search
nodes~\cite[p.~12]{mckenzie95error}, such as cycles in the parsing stack,
although this leads to some minimum cost repairs being
skipped~\cite{bertsch99failure}. A number of interlocking, sophisticated pruning
mechanisms which build on this are described in~\citet{cerecke03phd}. These are
significantly more complex than our merging of compatible nodes; since this
gives us acceptable performance in practise, we have not investigated other
pruning mechanisms.

\cite{deJonge12natural}

\cite{pottier16reachability}

\cite{gomezrodriguez10error}


\section{Future work}

Our current parsing tool uses the merging algorithm from
\citet{pager77practical}, but this can over-merge states when conflict
resolution is used \cite[p.~3]{denny10ielr}. Since our error recovery approach
is intended to be independent of the merging approach, it should be possible to
use the more sophisticated state merging approach of \cite{denny10ielr} without
problems.

\bibliography{bib}

\end{document}
