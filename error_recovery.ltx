\documentclass[acmsmall,small,screen]{acmart}\settopmatter{printfolios=true,printccs=false,printacmref=false}
%\documentclass[acmsmall,review,anonymous]{acmart}\settopmatter{printfolios=true,printccs=false,printacmref=false}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}

\usepackage{booktabs}
\usepackage{listings}
\usepackage{multicol}
\usepackage{proof}
\usepackage{softdev}
\usepackage{subcaption}
\usepackage{xspace}

\usepackage[ruled]{algorithm2e} % For algorithms
\renewcommand{\algorithmcfname}{ALGORITHM}
\SetAlFnt{\small}
\SetAlCapFnt{\small}
\SetAlCapNameFnt{\small}
\SetAlCapHSkip{0pt}
\IncMargin{-\parindent}

\acmJournal{PACMPL}
\acmVolume{1}
\acmNumber{CONF} % CONF = POPL or ICFP or OOPSLA
\acmArticle{1}
\acmYear{2018}
\acmMonth{1}
\acmDOI{} % \acmDOI{10.1145/nnnnnnn.nnnnnnn}
\startPage{1}

\lstset{
    basicstyle=\tt\scriptsize,
    xleftmargin=0pt,
    numbersep=.8em,
    numberstyle=\scriptsize\tt\color{gray},
    captionpos=b,
    escapeinside={{<!}{!>}},
}

\setcopyright{none}

\bibliographystyle{ACM-Reference-Format}
\citestyle{acmauthoryear}

% DOI
%\acmDOI{0000001.0000001}

% Paper history
%\received{February 2007}

\newcommand{\corchueloplus}{\textit{CPCT}$^+$\xspace}
\newcommand{\crarrow}{\rightarrow_{\textrm{\tiny CR}}}
\newcommand{\crarrowstar}{\rightarrow_{\textrm{\tiny CR}}^*}
\newcommand{\lrarrowstar}{\rightarrow_{\textrm{\tiny LR}}^*}
\newcommand{\lrarrow}{\rightarrow_{\textrm{\tiny LR}}}
\newcommand{\mf}{\textit{MF}\xspace}

\include{experimentstats}

% Document starts
\begin{document}
% Title portion. Note the short title for running heads
\title[Fast Multiple Repair Error Recovery]{Fast Multiple Repair Error Recovery}

\author{Lukas Diekmann}
\affiliation{%
  \department{Software Development Team}
  \institution{King's College London}
  \country{United Kingdom}}
\author{Laurence Tratt}
\orcid{0000-0002-5258-3805}
\affiliation{%
  \department{Software Development Team}
  \institution{King's College London}
  \country{United Kingdom}
}
\thanks{Authors' URLs: %
    L.~Diekmann~\url{http://diekmann.co.uk/},
    L.~Tratt~\url{http://tratt.net/laurie/}.
}


\begin{abstract}
Syntax errors are generally easy to fix for humans, but not for parsers: the
latter often fail to find an effective recovery, leading to a cascading chain of
errors that drown out the original. More advanced recovery techniques
suffer much less from this problem but have seen little practical use because
their typical performance was seen as poor and their worse case unbounded.
In this paper we show that not only can an advanced approach run in acceptable time
-- which we define as spending a maximum of 0.5s in error recovery per file -- but
that we can increase the complexity of the problem to finding \emph{all} minimal
cost recovery options, and still do so within acceptable time. We first extend
an existing algorithm, before introducing a new, faster, alternative \mf. We
validate our algorithms with a corpus of \corpussize real-world
syntactically invalid of Java programs: \mf is able to find recovery options for
\mfsuccessrate of these in acceptable time.
\end{abstract}

\keywords{Parsing, error recovery, programming languages}

\maketitle

\section{Introduction}

Programming is a humbling job, which requires acknowledging that we will make
untold errors in our quest to perfect a program. Most troubling are semantic
errors, where we intended the program to do one thing, but it does another. Less
troubling, but often no less irritating, are syntax errors, which are
(generally minor) deviances from the exacting syntax required by a compiler.
So common are syntax errors that the parsers in modern compilers expect us to make several
in a single input. Rather than stop on the first syntax error encountered, they attempt
to \emph{recover} from it. This allows them to report, and us to fix, all our
syntax errors in one go.

When error recovery works well, it is a useful productivity gain. Unfortunately,
widely used approaches are ad-hoc and simplistic, with
two weaknesses limiting their usefulness: only limited consideration is
given to the context of the error; and the only recoveries attempted are the
skipping of input until a pre-determined synchronisation
token is reached~\cite[p.~3]{degano95comparison} or the insertion of a
single synchronisation token. Inappropriate recoveries tend to cause a
cascade of spurious syntax errors (see
Figure~\ref{fig:javaerror} for an example): programmers quickly learn that
only the position of the first error -- not the reported repair, nor the position of
subsequent errors -- can really be relied upon to be accurate.

\begin{figure}[t]
\begin{minipage}{0.48\textwidth}
\begin{tabular}{p{0.02\textwidth}p{0.45\textwidth}}
\begin{subfigure}{0.02\textwidth}
\caption{}
\label{lst:javaerror:input}
\end{subfigure}
&
\begin{minipage}[t]{0.45\textwidth}
\vspace{-7pt}
\begin{lstlisting}
class C {
  int x y;
}
\end{lstlisting}
\end{minipage}
\\
\begin{subfigure}{0.02\textwidth}
\addtocounter{subfigure}{1}
\caption{}
\label{lst:javaerror:mf}
\end{subfigure}
&
\begin{minipage}[t]{0.45\textwidth}
\vspace{-7pt}
\begin{lstlisting}
Error at line 2 col 9. Repairs found:
  Delete "y"
  Insert "COMMA"
  Insert "EQ"
\end{lstlisting}
\end{minipage}
\end{tabular}
\end{minipage}
%
\begin{minipage}{0.48\textwidth}
\vspace{-20.5pt}
\begin{tabular}{p{0.02\textwidth}p{0.45\textwidth}}
\begin{subfigure}{0.02\textwidth}
\addtocounter{subfigure}{-2}
\caption{}
\label{lst:javaerror:javac}
\end{subfigure}
&
\begin{minipage}[t]{0.45\textwidth}
\vspace{-7pt}
\begin{lstlisting}
C.java:2: error: ';' expected
  int x y;
       ^
C.java:2: error: <identifier> expected
  int x y;
         ^
\end{lstlisting}
\end{minipage}
\end{tabular}
\end{minipage}
%&
%\begin{minipage}[t]{0.47\textwidth}
%\vspace{-17pt}
\vspace{-10pt}
\caption{An example of a simple, common Java syntax error
(\subref{lst:javaerror:input}) and the problems traditional error recovery has in
dealing with it. \texttt{javac} (\subref{lst:javaerror:javac}) spots the error
when it encounters `\texttt{y}'. Its error recovery heuristic then
repairs the input by inserting a semicolon before `\texttt{y}' (i.e.~making
the input equivalent to `\texttt{int x; y;}'). This immediately leads to a spurious second parse error,
since `\texttt{y}' on its own is not a valid statement. The \corchueloplus and \mf
recovery algorithms (both produce the output shown in \subref{lst:javaerror:mf}) also spot the
error when it encounters `\texttt{y}', and then use the
Java grammar to find minimal cost repair sequences. These two algorithms find
and report to the user three separate repair sequences: one can delete `\texttt{y}'
entirely (`\texttt{int x;}'), or insert a comma
(`\texttt{int x, y;}'), or insert an equals sign (\texttt{`int x = y;'}). In
this case, all three repair sequences have the same rank, and are thus presented
in an arbitrary order. However, it is important to note that the first repair
sequence is then used to repair the input for subsequent parsing. Presenting all
three minimal cost repair sequences to the user gives a much greater chance that one
matches their original intention.}
\label{fig:javaerror}
%\end{minipage}
%\end{tabular}
\end{figure}

Most of us are so used to this state of affairs that
we assume it to be inevitable. However, there are more advanced algorithms which,
as well as being able to deal with any LR grammar, take into account the full context of the error, and have
several ways of recovering from errors. Probably the earliest such algorithm
is \citet{aho72minimum}, which, upon encountering an error, creates on-the-fly an
alternative (possibly ambiguous) grammar which allows the parser to recover.
The implementation complexity of this algorithm, and the challenge of explaining
to users what has been done, probably explain why it has fallen out of
favour in programming language circles. A simpler family of algorithms, which
trace their roots to \citet{fischer79locally}, instead try to find a single minimal cost
\emph{repair sequence} of token insertions and deletions which allow the parser to
recover. Algorithms in this family are good at recovering from errors and are
easily adapted to give human-friendly feedback. However, they
have seen little practical use because their typical
performance was seen as poor and their worse case unbounded \cite[p.~14]{mckenzie95error}.

In this paper we first test the following hypothesis:

\begin{description}
  \item[H1] Error recovery algorithms from the \citet{fischer79locally} family
    can repair nearly all errors in acceptable time.
\end{description}

We (somewhat arbitrarily) define `acceptable time' as 0.5s for error recovery
per file (i.e.~all errors in a file must be
recovered from within this time) since we think that even the most demanding user
will tolerate that delay in order to get better quality results. We
strongly validate this hypothesis. To a
reasonable extent our access to faster hardware made it more likely that we
can validate this hypothesis than past researchers. However, while existing
algorithms in the \citet{fischer79locally} family aim to find a single
minimal cost repair sequence, we also test a second, stronger, hypothesis:

\begin{description}
  \item[H2] Nearly all minimal cost repair sequences can be found in acceptable time.
\end{description}

We also strongly validate this hypothesis. In other words, we are able to tackle a
harder version of the problem than any previous algorithm, and do so in
acceptable time. This not only leads to higher quality, and more programmer
friendly, error messages (see Figure~\ref{fig:javaerror} for an example), but
allows us to reduce the cascading error problem still further.

We first use one of the more recent algorithms in this family -- that of
\citet{corchuelo02repairing} -- as a base, slightly correcting and extending it
to form an algorithm \corchueloplus (Section~\ref{corchueloplus}). We
then show that an even newer algorithm which promises better performance -- that
of \citet{kimyi10astar} -- has problems which cause it to miss many
minimal cost repair sequences (Section~\ref{kimyi}). However, we are able to use
it as partial inspiration for an entirely new error recovery algorithm \mf
(Section~\ref{mf}), which is approximately \mfratioovercorchuelo faster than
\corchueloplus. We aim for both algorithms to be as simple as possible, so that
they are realistic targets for tool builders: \corchueloplus is somewhat
simpler than \mf, though the latter is still less than 1,000 lines of Rust code.

We then validate \corchueloplus and \mf on a corpus of \corpussize real,
syntactically incorrect, Java programs (Section~\ref{experiment}) -- approximately
15x bigger than the biggest previous experiment \cite[p.~84]{cerecke03phd}. Within the
time budget of 0.5s: \corchueloplus is able to find repairs for \corchuelosuccessrate
of files within this time, with a mean recovery time of \corchuelomeantime; and
\mf is able to find repairs for \mfsuccessrate of files within this time, with
a mean recovery time of \mfmeantime. We believe that this shows that such
approaches are ready for wider usage, either on their own, or as part of a multi-phase
recovery system such as \citet{deJonge12natural}.


\section{Background}

\begin{figure}[t]
\begin{lstlisting}
%start Expr
%%
Expr: Term "+" Expr
    | Term ;

Term: Factor "*" Term
    | Factor ;

Factor: "(" Expr ")"
      | "INT" ;
\end{lstlisting}
\caption{An example grammar, its corresponding stategraph, and statetable.
  Each item within a state $[N \colon \alpha \bullet \beta]$ references one
  of the rule $N$'s productions; $\alpha$ and $\beta$ each
represent zero or more symbols; with the \emph{dot} ($\bullet$) representing
  how much of the production must have been matched ($\alpha$) if parsing has
  reached that state, and how much remains ($\beta$).
  \laurie{the stategraph and statetable are (obviously) missing}}
\label{fig:stategraphtable}
\label{fig:exprgrammar}
\end{figure}

We assume a high-level understanding of the mechanics of parsing in this paper,
but in this section we provide a handful of definitions, and a brief refresher
of relevant low-level details, needed to understand the rest of this paper.
Although the parsing tool we created for this paper is written in Rust, we
appreciate that this still an unfamiliar language to most readers: code examples
are therefore given in Python which, we hope, is familiar to most.

Although there are many flavours of parsing, the \citet{fischer79locally} family
of algorithms, including those presented in this paper, are based on LR
parsing~\cite{knuth65lllr}. As well as describing the largest practical set
of unambiguous grammars, LR parsing remains one of the most widely used parsing
approaches due to the ubiquity of Yacc~\cite{johnson75yacc} and its
descendants (which include the Rust parsing tool we created for this paper).
We use Yacc syntax throughout this paper so that
examples can easily be tested in Yacc-compatible parsing tools.

Yacc-like tools take in a Context-Free Grammar (CFG) and produce a parser from
it. The CFG has one or more \emph{rules}; each rule has a name and one or more
\emph{productions} (often called `alternatives'); each production contains one
or more \emph{symbols}; and a symbol is either a \emph{terminal} (i.e.~a token
type such as \texttt{INT}) or a \emph{nonterminal} (i.e.~a reference to another rule in
the grammar). One rule is designated the \emph{start rule}. The resulting parser
takes as input a stream of tokens, each of which has a \emph{type}
(e.g.~\texttt{INT}) and a \emph{value} (e.g.~\texttt{123}).\footnote{In practise, the
system we outline requires a \emph{lexer} which splits string inputs up into
tokens. In the interests of brevity, we assume the existence of a tool such as
Lex which performs this task.} Strictly speaking, parsing is the act of
determining whether a stream of tokens is correct with respect to the underlying
grammar. Since this is rarely useful on its own, Yacc-like tools allow grammars
to specify `semantic actions' which are executed when a production in the grammar is
successfully matched. In this paper, we assume that the semantic actions build
a \emph{parse tree}, ordering the tokens into a tree of nonterminals (nodes
which can have children) and terminals (nodes which cannot have children)
relative to the underlying grammar.

The beauty of LR parsing stems from the way a parser is constructed. The CFG is
first transformed into a \emph{stategraph}, which is a statemachine
where each node contains one or more \emph{items} (describing the valid
parse states at that point) and edges are labelled with terminals or
nonterminals. Since even on a modern machine, a canonical
(i.e.~unmerged) LR stategraph for a real-world grammar takes several seconds to
build, and a surprising amount of memory to store, we use the state merging
algorithm of \citet{pager77practical} to merge together compatible states. The
effect of this is significant, reducing the Java grammar we use later from
\laurie{8000ish} to \laurie{900ish} states. The stategraph is then transformed into a
\emph{statetable} with one row per state. Each row has a possibly empty \emph{action} (shift, reduce,
or accept) for each terminal and a possibly empty \emph{goto state} for each
nonterminal. Figure~\ref{fig:stategraphtable} shows an example grammar, its
stategraph, and statetable.

The statetable allows us to define a simple, efficient, parsing process. We
first define two functions relative to the statetable: \textsf{action}$(s, t)$
returns the action for the state $s$ and token $t$
or \emph{error} if no such action exists; and \textsf{goto}$(s, N)$
returns the goto state for the state $s$ and the nonterminal $N$. We then define
a reduction relation $\lrarrow$ for $(\textit{parsing stack}, \textit{token
list})$ pairs with two reduction rules as shown in Figure~\ref{fig:lrreduction}.
A full LR parse $\lrarrowstar$ repeatedly applies the two $\lrarrow$ reductions
until neither applies, which means that either \textsf{action}$(s_n, i)$ is:
$\textit{accept}$ (i.e.~the input has been fully parsed); or
$\textit{error}$ (i.e.~an error has been detected at position $i$). A
full parse of an empty file takes a starting pair of $([0], [t_0 \ldots t_n, \$])$,
where state $0$ is expected to represent the entry point into the stategraph, $t_0 \ldots t_n$ are
the sequence of input tokens, and $\$$ is the special End-Of-File (EOF) token.

\begin{figure}[t]
\small
\[
\infer[(\textsc{LR Shift})]
      {([s0 \ldots s_n], [t_0 \ldots t_n]) \lrarrow ([s_0 \ldots s_n, s'], [t_1 \ldots t_n])}
      {\textsf{action}(s_n, t_n) = \textit{shift}\ s'}
\]
\vspace{-3pt}
\[
\infer[(\textsc{LR Reduce})]
      {([s0 \ldots s_n], [t_0 \ldots t_n]) \lrarrow ([s_0 \ldots s_{n - \lvert \alpha \rvert}, s'], [t_0 \ldots t_n])}
      {(\textsf{action}(s_n, t_n) = \textit{reduce}\ N \colon \alpha)
       \wedge (\textsf{goto}(s_{n - \lvert \alpha \rvert}, N) = s')}
\]
\caption{Core reduction rules for $\lrarrow$. \textsc{LR Shift}
advances the input by one token and grows the parsing stack, while
\textsc{LR Reduce} unwinds the parsing stack when a production is complete
before moving to a new state.}
\label{fig:lrreduction}
\end{figure}


\section{\corchueloplus}
\label{corchueloplus}

The \citet{fischer79locally} family of error recovery algorithms has many
members --- far too many to cover them all in one paper (see
\citet{cerecke03phd} for a fairly comprehensive summary). We therefore start
with one of the more recent members -- \citet{corchuelo02repairing}. We first
explain, with one alteration for correctness, the original algorithm
(Section~\ref{corchuelo:orig}), although we use different notation
than the original, fill in several missing details,
and provide a more formal definition of the overall algorithm. We then
show that the algorithm needs a further alteration in order that it
does not miss some minimal cost repair sequences
(Section~\ref{corchuelo:kimyi}). Since the original description
gives few details as to how the algorithm might best be implemented, we then
explain the steps we took to make a performant implementation
(Section~\ref{corchuelo:implementation}). Finally, we show how the algorithm can
be extended to find all minimum cost repair sequences
(Section~\ref{corchuelo:allminimumcost}). It is this final algorithm that we
refer to as \corchueloplus and which forms part of our later evaluation.


\subsection{The original algorithm}
\label{corchuelo:orig}

As with all error recovery algorithms, \citet{corchuelo02repairing} is invoked
when an error is found in main parsing i.e.~when \textsf{action}$(s_n, i) =
\textit{error}$. Intuitively, the algorithm starts at the error state and tries
to find a minimum cost repair sequence consisting of: \textit{insert T}
(`insert a token of type T'), \textit{delete} (`delete the token at the current offset'),
or \textit{shift} (`skip over the token at the current offset without changing it'). The
algorithm completes successfully if it reaches an accept state or shifts
`enough' tokens ($N_\textit{shift}$; set at 3 in \citet{corchuelo02repairing}),
or unsuccessfully if it consumes `too many' tokens ($N_\textit{total}$; set at
10 in \citet{corchuelo02repairing}).

\begin{figure}[tb]
\small
\[
\infer[\textsc{CR Insert}]
      {([s_0 \ldots s_n], [t_0 \ldots t_n]) \crarrow (S', [t_0 \ldots t_n], [\textit{insert}~t])}
      {(\textsf{action}(s_n, t_0) \ne error) \wedge (t \ne \${})
       \wedge ([s_0 \ldots s_n], [t, t_0 \ldots t_n]) \lrarrowstar (S', [t_0 \ldots t_n])}
\]
\vspace{-6pt}
\[
\infer[\textsc{CR Delete}]
      {(S, [t_0 \ldots t_n]) \crarrow (S, [t_1 \ldots t_n], [\textit{delete}])}
      {t_0 \ne \$}
\]
\vspace{-3pt}
\[
\hspace{-12pt}
\infer[\textsc{CR Shift}]
      {(S, [t_0 \ldots t_n]) \crarrow ([s_0 \ldots s_n], [t_j \ldots t_n], [\underbrace{\textit{shift} \ldots \textit{shift}}_j])}
      {%
\begin{array}{c}
(S, [t_0 \ldots t_n]) \lrarrowstar ([s_0 \ldots s_n], [t_j \ldots t_n])
 \wedge S \ne [s_0 \ldots s_n] \wedge 0 \leq j \leq N_\textit{shifts}
\\
 \textsf{action}(s_n, t_j) \in \{\textit{accept}, \textit{error}\} \vee j = N_\textit{shifts}
\end{array}}
\]

\caption{The repair-creating reduction rules \cite{corchuelo02repairing}.
\textsc{CR Insert} finds all terminals reachable from the current state and
creates insert repairs for them (other than the EOF token `$\$$').
\textsc{CR Delete} creates deletion repairs if user defined input remains.
\textsc{CR Shift} parses at most $N_\textit{shift}$ tokens; if it reaches an accept or error
state, or parses exactly $N_\textit{shift}$ tokens, then a shift repair per
token shifted is created.}
\label{fig:corchuelo:reductions}
\vspace*{-8pt}
\end{figure}


\begin{figure}[tb]
\begin{multicols}{2}
\begin{lstlisting}[numbers=left]
def corchueloetal(pstack, toks):
  todo = [[(pstack, toks, [])]]
  cur_cst = 0
  while cur_cst < len(todo):
    if len(todo[cur_cst]) == 0:
      cur_cst += 1
      continue
    n = todo[cur_cst].pop()
    if action(n[0][-1], n[1]) == <!{\textrm{\textit{accept}}}!> \
       or ends_in_N_shifts(n[2]):
      return n
    elif len(n[1]) - len(toks) == N_total:
      continue
    for nbr in all_cr_star(n.0, n.1):
      if len(n[2]) > 0 and n[2][-1] == <!{\textrm{\textit{delete}}}!> \
         and nbr[2][-1] == <!{\textrm{\textit{insert}}}!>:
        continue
      cst = cur_cst + rprs_cst(nbr_rprs)
      for _ in range(len(todo), cst):
        todo.push([])
      todo[cst].append((nbr[0], nbr[1], \
                        n[2] + nbr[2]))
  return None

def rprs_cst(rprs):
  c = 0
  for r in rprs:
    if r == <!{\textrm{\textit{shift}}}!>: continue
    c += 1
  return c

def all_cr_star(pstack, toks):
  # Exhaustively apply the <!{$\crarrowstar$}!> relation to
  # (pstack, toks) and return the resulting
  # list of (pstack, toks, repair) triples.
\end{lstlisting}
\columnbreak
\vspace*{-18pt}
\caption{Our interpretation of the \citet{corchuelo02repairing} algorithm. The main function
\texttt{corchueloetall} takes in a (\emph{parsing stack}, \emph{token list})
pair and returns: a (\emph{parsing stack}, \emph{token list}, \emph{repair
sequence}) triple where \emph{repair sequence} is guaranteed to be a minimal
cost repair sequence; or \texttt{None} if it failed to find a repair sequence.\\[9pt]
%
The algorithm maintains a todo list of lists (which we
chose to model on \citet[p.~25]{cerecke03phd}); the first sub-list contains
search nodes of cost 0, the second sub-list contains search nodes of cost 1 and
so on. The todo list is initialised with the error parsing stack, remaining
tokens, and an empty repair sequence (line 2). If there are todo items left, a
lowest cost node $n$ is picked (line 8). If $n$ represents an accept state (line
9) or if the last $N_\textit{shifts}$ repairs are shifts (line 10), then $n$
represents a minimal cost repair sequence and the algorithm terminates
successfully (line 11). If $n$ has already consumed $N_\textit{total}$ tokens,
then it is discarded (lines 12, 13). Otherwise, $n$'s neighbours
are gathered using the $\crarrow$ relation (lines 14, 32--35). To avoid
duplicate repairs, \textit{delete} repairs never follow \textit{insert} repairs
(lines 16--18). Each neighbour has its repairs costed and is then
assigned to the correct todo sub-list (lines 19--23).\\[9pt]
%
The \texttt{rprs\_cst} function returns the cost of a repair sequence. Inserts
and deletes cost 1, shifts 0.}
\label{fig:corchuelo:algorithm}
\end{multicols}
\end{figure}

As with the original, we explain the approach in two parts. First is a new reduction relation
$\crarrow$ which defines when individual repairs are created
(Figure~\ref{fig:corchuelo:reductions}). Second is an algorithm which
determines when to use the $\crarrow$ relation (Figure~\ref{fig:corchuelo:algorithm}).
As well as several changes for clarity, there are two major differences
between our explanation and that of \citet{corchuelo02repairing}.

First, our
\textsc{CR Shift} reduction rule has an important correctness fix.
The original rule always requires at least one token to be shifted. However,
after a delete repair, for example, all that may be required is one or more
reductions in order to reach an \textit{accept} state. We fix this in two
phases: we do not require any tokens to have been shifted (i.e.~we use $0
\leq j \leq N_\textit{shifts}$ whereas \citet{corchuelo02repairing} specify $0 <
j \leq N_\textit{shifts}$); and then, to avoid the infinite loops that the first
phase potentially introduces, we require the LR parser to make progress ($S \ne
[s_0 \ldots s_n]$).

Second, \citet{corchuelo02repairing} only explain in prose (spread amongst
several topics over several pages) what we have captured as an algorithm in
Figure~\ref{fig:corchuelo:algorithm}: perhaps inevitably when capturing prose as
code, we have had to fill in several missing details. For example,
\citet{corchuelo02repairing} do not define what the cost of repairs is: for
simplicities sake, we define the cost of \textit{insert} and \textit{delete} as
1, and \textit{shift} as 0.\footnote{It is trivial to extend this to variable
token costs if desired, and our implementation supports this. However, it is
unclear whether non-uniform token costs are useful in practise
\cite[p.96]{cerecke03phd}.}

\laurie{do we need an example here? probably...}


\subsection{Finding minimal cost repair sequences that are missed by \textsc{CR Shift}}
\label{corchuelo:kimyi}

Both the original description of the \citet{corchuelo02repairing} algorithm, and
our version of it, have a surprising weakness: they are not capable of finding
some minimal cost repairs~\cite[p.~12]{kimyi10astar}. The
weakness is, perhaps unsurprisingly, in the most complex rule, \textsc{CR Shift}
which creates multiple shifts in one go. This causes it to miss intermediate
positions from which minimal cost repair sequences may be found.

\begin{figure}[tb]
\small
\[
\infer[\textsc{CR Shift 2}]
      {(S, [t_0 \ldots t_n]) \crarrow (S', [t_j \ldots t_n], R)}
      {%
\begin{array}{c}
(S, [t_0 \ldots t_n]) \lrarrowstar (S', [t_j \ldots t_n])
 \wedge S \ne S'
 \wedge 0 \leq j \leq 1
\\
 (j = 0 \wedge R = [])
  \vee
  (j = 1 \wedge R = [\textit{shift}])
\end{array}
}
\]

\caption{An improved version of the \textsc{CR Shift} rule from
Fig~\ref{fig:corchuelo:reductions}. Whereas \textsc{CR Shift} generates multiple
shift repairs in one go, skipping `intermediate' repair positions, \textsc{CR
Shift 2} generates at most one shift, exploring all intermediate repair
positions.}
\label{fig:corchuelo:kimyi}
\vspace*{-8pt}
\end{figure}

\begin{figure}
\begin{tabular}[t]{llll}
\begin{subfigure}{0.02\textwidth}
\vspace{-31.5pt}
\caption{}
\label{fig:crshift2:orig}
\end{subfigure}
&
\hspace{-6pt}
\begin{lstlisting}
Delete, Delete
Delete, Shift, Delete
Delete, Shift, Insert "PLUS"
Delete, Shift, Insert "MULT"
\end{lstlisting}
&
\begin{subfigure}{0.02\textwidth}
\vspace{-31.5pt}
\caption{}
\label{fig:crshift2:new}
\end{subfigure}
&
\hspace{-6pt}
\begin{lstlisting}
Insert "INT", Shift, Delete
Insert "INT", Shift, Shift, Delete
Insert "INT", Shift, Shift, Insert "PLUS"
Insert "INT", Shift, Shift, Insert "MULT"
\end{lstlisting}
\end{tabular}

\caption{Repair sequences for the input `\texttt{+ 2 3}' (where an error is
found at the first token) relative to the grammar from
Figure~\ref{fig:exprgrammar}. (\subref{fig:crshift2:orig}) shows the four repair
sequences that the original \textsc{CR Shift} rule is capable of finding.
(\subref{fig:crshift2:new}) shows the four additional repair sequences that the
new \texttt{CR Shift 2} rule is capable of finding.}
\label{fig:crshift2:example}
\end{figure}

The solution is therefore simple: at most one shift can be generated at any one
time so that intermediate positions are not missed. A replacement reduction rule
\textsc{CR Shift 2} is shown in Figure~\ref{fig:corchuelo:kimyi} (loosely based
on the \textsc{R3S-n} rule from \cite[p.~12]{kimyi10astar}, though their rule
shares the same correctness problem with always requiring a shift that we fixed
in the previous section for \textsc{CR Shift}). Relative to
\textsc{CR Shift}, it is simpler, though it also inevitably slows down the
search for repair sequences, since more are tried. An example of the additional
repair sequences it can find is shown in Figure~\ref{fig:crshift2:example}.
As this example shows, the additional repair sequences can by significantly
different: while the repair sequences findable by \textsc{CR Shift} all require
deleting some of the user's input, \textsc{CR Shift 2}'s repair sequences
include those which require no deletions.

\subsection{Implementation considerations}
\label{corchuelo:implementation}


\subsection{Finding all minimum cost repair sequences}
\label{corchuelo:allminimumcost}


\section{\cite{kimyi10astar}}
\label{kimyi}


\section{\mf}
\label{mf}

\subsection{Ambiguity}
\label{disambiguation}


\section{Experiment}
\label{experiment}

\subsection{Methodolgy}

\subsection{Results}
\section{Related work}

\cite{corchuelo02repairing}

\cite{deJonge12natural}

\cite{pottier16reachability}

\cite{gomezrodriguez10error}


\section{Future work}

Our current parsing tool uses the merging algorithm from
\citet{pager77practical}, but this can over-merge states when conflict
resolution is used \cite[p.~3]{denny10ielr}. Since our error recovery approach
is intended to be independent of the merging approach, it should be possible to
use the more sophisticated state merging approach of \cite{denny10ielr} without
problems.

\bibliography{bib}

\end{document}
